#!/usr/bin/env bash

# stash old path
#if [ -z ${__PATH__+$PATH} ]
#if (!)
export __PATH__="${PATH}"

export PYTHON_NUMBER=`${VIRTUAL_ENV}/bin/python -c "import platform;print '%s.%s' % platform.python_version_tuple()[:2]"`
export PYTHONPATH="\
${VIRTUAL_ENV}/lib/python${PYTHON_NUMBER}/site-packages:\
${VIRTUAL_ENV}:\
."

export VENV=$VIRTUAL_ENV
export INSTANCE="${VIRTUAL_ENV}/instance"
export LOCAL="${VIRTUAL_ENV}/local"

# these strings operate like lambda functions --
# you use them like so: `if [[ DEPLOYED ]]; then` ...
# the string comparison's evaluated truthiness yields
# the properly bash-ist return value, in your context.
export DEPLOYED="eval [[ ${HOSTNAME,,} != *local ]]"
export SUPERUSER="eval [[ ${USER,,} == root ]]"

export INSTANCE_NAME=`echo "$(basename ${VIRTUAL_ENV})" | sed -e s/[^A-Za-z0-9]/_/g`
export INSTANCE_SAFE_NAME=${INSTANCE_NAME,,} # two commas = lowercase
export INSTANCE_SRC=`echo "$(basename ${VIRTUAL_ENV})"`
export INSTANCE_MODULE="${INSTANCE}/${INSTANCE_SAFE_NAME}"
export INSTANCE_BIN="${VIRTUAL_ENV}/bin"
export INSTANCE_LIB="${VIRTUAL_ENV}/lib"
export INSTANCE_INCLUDE="${VIRTUAL_ENV}/include"
export INSTANCE_PYTHON="${INSTANCE_LIB}/python${PYTHON_NUMBER}"
export INSTANCE_PYTHON_SITE="${INSTANCE_PYTHON}/site-packages"
export INSTANCE_ADNAUSEUM="${VIRTUAL_ENV}/etc"
export INSTANCE_VARIANT="${VIRTUAL_ENV}/var"
export INSTANCE_VARIANT_DATA="${INSTANCE_VARIANT}/db"
export INSTANCE_WEBROOT="${INSTANCE_VARIANT}/web"
export INSTANCE_DEVELOPMENT_DB="${INSTANCE_VARIANT_DATA}/dev.db"
export INSTANCE_LOGS="${INSTANCE_VARIANT}/logs"
export INSTANCE_CACHE="${INSTANCE_VARIANT}/cache"
export INSTANCE_RUN="${INSTANCE_VARIANT}/run"
export INSTANCE_TMP="${INSTANCE_VARIANT}/tmp"

export LOCAL_BIN="${LOCAL}/bin"
export LOCAL_LIB="${LOCAL}/lib"
export LOCAL_INCLUDE="${LOCAL}/include"
export LOCAL_PYTHON="${LOCAL_LIB}/python${PYTHON_NUMBER}"
export LOCAL_PYTHON_SITE="${LOCAL_PYTHON}/site-packages"

export PYTHONPATH="\
${LOCAL_PYTHON_SITE}:\
${INSTANCE_MODULE}:\
${INSTANCE}:\
${INSTANCE_PYTHON_SITE}:\
${VIRTUAL_ENV}:\
."

export PATH="\
${LOCAL_BIN}:\
${INSTANCE_BIN}:\
${__PATH__}:\
."

function is_dir () { 
    (cd ${1:?pathname expected}) || return
}

function load_praxon () {
    source "${PRAXIME_BASE}/Library/${1:?praxon expected}.sh"
}

function install_praxon () {
    source "${PRAXIME_BASE}/Install/${1:?praxon expected}.sh"
}

function vremove () {
    is_dir "${VIRTUAL_ENV}/${1:?pathname expected}" && rm -rf "${VIRTUAL_ENV}/${1}"
}

# prepare bash funcs for download/install praxons 
load_praxon "download"
load_praxon "urlcache"

# We don't create separate '-deploy' versions of Django settings or admin scripts --
# conditional deployment logic is DRYer if implemented in Python, as needed
# NB. DJANGO_* variables may be referencing things that do not yet exist
export DJANGO_VERSION="1.6.2"
export DJANGO_SETTINGS_MODULE="settings" # NOT A MADE UP VARIABLE
export DJANGO_ADMIN="${INSTANCE_BIN}/django-admin.py"
export DJANGO_ADMINSITE_USER="admin"

# These are set whenever env_preinit is evaluated, to prepare the `vrun` func.
if [[ $DEPLOYED ]]; then
    export SUPERVISORD_CONF="${INSTANCE_ADNAUSEUM}/supervisord-deploy.conf"
    export UWSGI_INI="${INSTANCE_ADNAUSEUM}/uwsgi-deploy.ini"
    export INSTANCE_REDIS_CONF="${INSTANCE_ADNAUSEUM}/redis-deploy.conf"
else
    export SUPERVISORD_CONF="${INSTANCE_ADNAUSEUM}/supervisord.conf"
    export UWSGI_INI="${INSTANCE_ADNAUSEUM}/uwsgi.ini"
    export INSTANCE_REDIS_CONF="${INSTANCE_ADNAUSEUM}/redis.conf"
fi

# Procfile is symlinked to the appropriate file during the Praxa instance build,
# see 
export PROCFILE_DEVELOP="${VIRTUAL_ENV}/Procfile.develop"
export PROCFILE_DEPLOY="${VIRTUAL_ENV}/Procfile.deploy"
export PROCFILE="${VIRTUAL_ENV}/Procfile"

# We then always set SUPERVISORD_DEPLOY_CONF and friends --
# used for both preparing instance templates and for development maintenance praxons
export SUPERVISORD_DEPLOY_CONF="${INSTANCE_ADNAUSEUM}/supervisord-deploy.conf"
export UWSGI_DEPLOY_INI="${INSTANCE_ADNAUSEUM}/uwsgi-deploy.ini"
export INSTANCE_REDIS_DEPLOY_CONF="${INSTANCE_ADNAUSEUM}/redis-deploy.conf"

# And now, these values conditionally depend on whether we are deployed
# ... they are strings that are evaluated by the relevant v* funcs,
# see the `venv-functions` library praxon for the definitions.
export SUPERVISORD="${INSTANCE_BIN}/supervisord -n -c ${SUPERVISORD_CONF}"
export SUPERVISORCTL="${INSTANCE_BIN}/supervisorctl -c ${SUPERVISORD_CONF}"

export PRAXON_TEMPLATES="${PRAXIME_BASE}/Templates"
export TEMPLATES=$PRAXON_TEMPLATES # this is sugar

# we may not install Solr, but these will be defined nonetheless
# (... maybe don't do that?)
export SOLR_ROOT="${LOCAL_LIB}/solr"
export SOLR_CONF="${SOLR_ROOT}/example/solr/collection1/conf"
export SOLR_SCHEMA="${SOLR_CONF}/schema.xml"
export SOLR_CONFIG="${SOLR_CONF}/solrconfig.xml"
export SOLR_STOPWORDS="${SOLR_CONF}/stopwords.txt"
export SOLR_STOPWORDS_EN="${SOLR_CONF}/stopwords_en.txt"
export SOLR_LIRE_SCHEMA_PATCH="${INSTANCE_ADNAUSEUM}/solr-lire-schema-fields.patch"

export MAKEFILE="${VIRTUAL_ENV}/Makefile"
export HONCHO="${INSTANCE_BIN}/honcho -f ${PROCFILE}"
export INSTANCE_BPYTHON_SETTINGS="${INSTANCE_ADNAUSEUM}/bpython-settings.py"
export IPYTHONDIR="${INSTANCE_ADNAUSEUM}/ipython" # NOT A MADE UP VARIABLE
export README="${VIRTUAL_ENV}/README.md"
